/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sistemasoperativos1;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.nio.file.Files;
import java.nio.charset.StandardCharsets;
import CoreV2.ProcesoConfig; // ¡Importante!
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import CoreV2.SimConfig;
import CoreV2.OperatingSystem; 
import CoreV2.Proceso; 
import CoreV2.Cola; 
import CoreV2.AlgorithmsStrategies.*;
import CoreV2.Nodo;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import java.awt.BorderLayout;
import CoreV2.Lista;
import CoreV2.AlgorithmsStrategies.ISchedulingAlgorithm.SchedulingType;
import sistemasoperativos1.ProcesoBloqueGUI;


/**
 *
 * @author juanr
 */
public class SimuladorGUI extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(SimuladorGUI.class.getName());
    
    private OperatingSystem so;
    
    /**
     * Creates new form SimuladorGUI
     */
public SimuladorGUI(OperatingSystem so) {
        initComponents();
        this.so = so;
        
        boolean ioInicial = comboTipo.getSelectedItem().equals("I/O bound");
        spinnerCiclosExcepcion.setEnabled(ioInicial);
        spinnerCiclosSatisfacer.setEnabled(ioInicial);
        cargarConfiguracion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Simulador = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        panelIzquierdo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        spinnerInstrucciones = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        spinnerCiclosExcepcion = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnerCiclosSatisfacer = new javax.swing.JSpinner();
        btnCrearProceso = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        comboPolitica = new javax.swing.JComboBox<>();
        btnGuardarCambios = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lblRelojGlobal = new javax.swing.JLabel();
        btnGuardarDefaultsProceso = new javax.swing.JButton();
        btnCargarProcesosArchivo = new javax.swing.JButton();
        panelDerecho = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        lblCpuProceso = new javax.swing.JLabel();
        lblCpuID = new javax.swing.JLabel();
        lblCpuPC = new javax.swing.JLabel();
        lblCpuMAR = new javax.swing.JLabel();
        lblCpuStatus = new javax.swing.JLabel();
        lblCpuTipo = new javax.swing.JLabel();
        panelCentral = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelContenidoListos = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelContenidoBloqueados = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        panelContenidoTerminados = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        areaLog = new javax.swing.JTextArea();
        Configuracion = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        spinnerDuracionCiclo = new javax.swing.JSpinner();
        btnAplicarDuracion = new javax.swing.JButton();
        Graficos = new javax.swing.JPanel();
        panelGrafico = new javax.swing.JPanel();
        Estadisticas = new javax.swing.JPanel();
        EstadisticasGenerales = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        lblStatsTotales = new javax.swing.JLabel();
        lblStatsIOBound = new javax.swing.JLabel();
        lblStatsCPUBound = new javax.swing.JLabel();
        lblStatsCicloActual = new javax.swing.JLabel();
        lblStatsThroughput = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        lblStatsTotales3 = new javax.swing.JLabel();
        lblStatsIOBound3 = new javax.swing.JLabel();
        lblStatsCPUBound3 = new javax.swing.JLabel();
        lblStatsCicloActual3 = new javax.swing.JLabel();
        lblStatsThroughput3 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        lblStatsTotales2 = new javax.swing.JLabel();
        lblStatsIOBound2 = new javax.swing.JLabel();
        lblStatsCPUBound2 = new javax.swing.JLabel();
        lblStatsCicloActual2 = new javax.swing.JLabel();
        lblStatsThroughput2 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        lblStatsTotales4 = new javax.swing.JLabel();
        lblStatsIOBound4 = new javax.swing.JLabel();
        lblStatsCPUBound4 = new javax.swing.JLabel();
        lblStatsCicloActual4 = new javax.swing.JLabel();
        lblStatsThroughput4 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        lblStatsTotales5 = new javax.swing.JLabel();
        lblStatsIOBound5 = new javax.swing.JLabel();
        lblStatsCPUBound5 = new javax.swing.JLabel();
        lblStatsCicloActual5 = new javax.swing.JLabel();
        lblStatsThroughput5 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        lblStatsTotales1 = new javax.swing.JLabel();
        lblStatsIOBound1 = new javax.swing.JLabel();
        lblStatsCPUBound1 = new javax.swing.JLabel();
        lblStatsCicloActual1 = new javax.swing.JLabel();
        lblStatsThroughput1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Cant. Instrucciones");

        jLabel2.setText("Tipo:");

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPU bound", "I/O bound" }));
        comboTipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTipoItemStateChanged(evt);
            }
        });
        comboTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoActionPerformed(evt);
            }
        });

        jLabel3.setText("Ciclos para generar Excepcion");

        jLabel4.setText("Ciclos para Satisfacer Excepción:");

        btnCrearProceso.setText("Crear Proceso");
        btnCrearProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearProcesoActionPerformed(evt);
            }
        });

        jLabel5.setText("Cambiar Política de Planificación");

        comboPolitica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "Round Robin", "SPN", "SRT", "HRRN", "Feedback" }));

        btnGuardarCambios.setText("Guardar Cambios");
        btnGuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCambiosActionPerformed(evt);
            }
        });

        jLabel6.setText("Ciclo de reloj Global");

        lblRelojGlobal.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        lblRelojGlobal.setText("0");

        btnGuardarDefaultsProceso.setText("Guardar Default");
        btnGuardarDefaultsProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarDefaultsProcesoActionPerformed(evt);
            }
        });

        btnCargarProcesosArchivo.setText("Cargar Procesos Archivo");
        btnCargarProcesosArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarProcesosArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelIzquierdoLayout = new javax.swing.GroupLayout(panelIzquierdo);
        panelIzquierdo.setLayout(panelIzquierdoLayout);
        panelIzquierdoLayout.setHorizontalGroup(
            panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIzquierdoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 125, Short.MAX_VALUE))
            .addGroup(panelIzquierdoLayout.createSequentialGroup()
                .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelIzquierdoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelIzquierdoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerCiclosExcepcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelIzquierdoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerCiclosSatisfacer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelIzquierdoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRelojGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelIzquierdoLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCargarProcesosArchivo)
                            .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(btnGuardarCambios, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIzquierdoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIzquierdoLayout.createSequentialGroup()
                        .addComponent(btnCrearProceso)
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIzquierdoLayout.createSequentialGroup()
                        .addComponent(comboPolitica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIzquierdoLayout.createSequentialGroup()
                        .addComponent(btnGuardarDefaultsProceso)
                        .addGap(62, 62, 62))))
        );
        panelIzquierdoLayout.setVerticalGroup(
            panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIzquierdoLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spinnerInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerCiclosExcepcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(spinnerCiclosSatisfacer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCrearProceso)
                .addGap(32, 32, 32)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboPolitica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGuardarCambios)
                .addGap(10, 10, 10)
                .addGroup(panelIzquierdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(lblRelojGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardarDefaultsProceso)
                .addGap(26, 26, 26)
                .addComponent(btnCargarProcesosArchivo)
                .addContainerGap(572, Short.MAX_VALUE))
        );

        jPanel5.add(panelIzquierdo, java.awt.BorderLayout.LINE_START);

        jLabel10.setText("CPU 1");

        jLabel11.setText("Proceso en Ejecución:");

        jLabel12.setText("ID: ");

        jLabel13.setText("PC: ");

        jLabel14.setText("MAR:");

        jLabel15.setText("Status:");

        jLabel16.setText("Tipo:");

        lblCpuProceso.setText("N/A");

        lblCpuID.setText("N/A");

        lblCpuPC.setText("N/A");

        lblCpuMAR.setText("N/A");

        lblCpuStatus.setText("N/A");

        lblCpuTipo.setText("N/A");

        javax.swing.GroupLayout panelDerechoLayout = new javax.swing.GroupLayout(panelDerecho);
        panelDerecho.setLayout(panelDerechoLayout);
        panelDerechoLayout.setHorizontalGroup(
            panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDerechoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDerechoLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCpuProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelDerechoLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDerechoLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel10)
                                .addGap(32, 32, 32))
                            .addGroup(panelDerechoLayout.createSequentialGroup()
                                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelDerechoLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblCpuID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(panelDerechoLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblCpuPC, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())))
                    .addGroup(panelDerechoLayout.createSequentialGroup()
                        .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelDerechoLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblCpuTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panelDerechoLayout.createSequentialGroup()
                                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(panelDerechoLayout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblCpuStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(panelDerechoLayout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblCpuMAR, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        panelDerechoLayout.setVerticalGroup(
            panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDerechoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(lblCpuProceso))
                .addGap(29, 29, 29)
                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(lblCpuID))
                .addGap(29, 29, 29)
                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(lblCpuPC))
                .addGap(33, 33, 33)
                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(lblCpuMAR))
                .addGap(34, 34, 34)
                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(lblCpuStatus))
                .addGap(42, 42, 42)
                .addGroup(panelDerechoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(lblCpuTipo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(panelDerecho, java.awt.BorderLayout.LINE_END);

        jLabel7.setText("Colas De Listos");

        panelContenidoListos.setLayout(new javax.swing.BoxLayout(panelContenidoListos, javax.swing.BoxLayout.X_AXIS));
        jScrollPane1.setViewportView(panelContenidoListos);

        jLabel8.setText("Cola de Bloqueados");

        panelContenidoBloqueados.setLayout(new javax.swing.BoxLayout(panelContenidoBloqueados, javax.swing.BoxLayout.X_AXIS));
        jScrollPane2.setViewportView(panelContenidoBloqueados);

        jLabel9.setText("Cola de Terminados");

        panelContenidoTerminados.setLayout(new javax.swing.BoxLayout(panelContenidoTerminados, javax.swing.BoxLayout.X_AXIS));
        jScrollPane3.setViewportView(panelContenidoTerminados);

        jLabel23.setText("Log de Eventos:");

        areaLog.setEditable(false);
        areaLog.setColumns(20);
        areaLog.setRows(5);
        jScrollPane4.setViewportView(areaLog);

        javax.swing.GroupLayout panelCentralLayout = new javax.swing.GroupLayout(panelCentral);
        panelCentral.setLayout(panelCentralLayout);
        panelCentralLayout.setHorizontalGroup(
            panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(panelCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCentralLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCentralLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCentralLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(285, 285, 285))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCentralLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(278, 278, 278))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCentralLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel23)
                .addGap(295, 295, 295))
            .addGroup(panelCentralLayout.createSequentialGroup()
                .addGap(341, 341, 341)
                .addComponent(jLabel7)
                .addContainerGap(643, Short.MAX_VALUE))
            .addGroup(panelCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        panelCentralLayout.setVerticalGroup(
            panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(526, Short.MAX_VALUE))
        );

        jPanel5.add(panelCentral, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout SimuladorLayout = new javax.swing.GroupLayout(Simulador);
        Simulador.setLayout(SimuladorLayout);
        SimuladorLayout.setHorizontalGroup(
            SimuladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        SimuladorLayout.setVerticalGroup(
            SimuladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Simulador", Simulador);

        jLabel22.setText("Duracion de Ciclo (ms)");

        spinnerDuracionCiclo.setModel(new javax.swing.SpinnerNumberModel(500, 10, 5000, 50));

        btnAplicarDuracion.setText("Aplicar Duración");
        btnAplicarDuracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAplicarDuracionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConfiguracionLayout = new javax.swing.GroupLayout(Configuracion);
        Configuracion.setLayout(ConfiguracionLayout);
        ConfiguracionLayout.setHorizontalGroup(
            ConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfiguracionLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel22)
                .addGap(18, 18, 18)
                .addGroup(ConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAplicarDuracion)
                    .addComponent(spinnerDuracionCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1189, Short.MAX_VALUE))
        );
        ConfiguracionLayout.setVerticalGroup(
            ConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfiguracionLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(ConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinnerDuracionCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAplicarDuracion)
                .addContainerGap(949, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Configuracion", Configuracion);

        panelGrafico.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout GraficosLayout = new javax.swing.GroupLayout(Graficos);
        Graficos.setLayout(GraficosLayout);
        GraficosLayout.setHorizontalGroup(
            GraficosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GraficosLayout.createSequentialGroup()
                .addComponent(panelGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 1468, Short.MAX_VALUE)
                .addContainerGap())
        );
        GraficosLayout.setVerticalGroup(
            GraficosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GraficosLayout.createSequentialGroup()
                .addComponent(panelGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 573, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Graficos", Graficos);

        Estadisticas.setLayout(new java.awt.GridLayout(3, 2));

        EstadisticasGenerales.setBorder(javax.swing.BorderFactory.createTitledBorder("Estadisticas Generales"));

        jLabel17.setText("Procesos Totales Terminados:");

        jLabel18.setText("Procesos I/O Bound Terminados:");

        jLabel19.setText("Procesos CPU bound Terminados:");

        jLabel20.setText("Ciclo Actual:");

        jLabel21.setText("Throughput General:");

        lblStatsTotales.setText("0");

        lblStatsIOBound.setText("0");

        lblStatsCPUBound.setText("0");

        lblStatsCicloActual.setText("0");

        lblStatsThroughput.setText("0");

        javax.swing.GroupLayout EstadisticasGeneralesLayout = new javax.swing.GroupLayout(EstadisticasGenerales);
        EstadisticasGenerales.setLayout(EstadisticasGeneralesLayout);
        EstadisticasGeneralesLayout.setHorizontalGroup(
            EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsTotales))
                    .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsIOBound)))
                .addGap(125, 125, 125)
                .addGroup(EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCPUBound)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsThroughput))
                    .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCicloActual)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        EstadisticasGeneralesLayout.setVerticalGroup(
            EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel19)
                    .addComponent(jLabel21)
                    .addComponent(lblStatsTotales)
                    .addComponent(lblStatsCPUBound)
                    .addComponent(lblStatsThroughput))
                .addGap(27, 27, 27)
                .addGroup(EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel20)
                    .addComponent(lblStatsIOBound)
                    .addComponent(lblStatsCicloActual))
                .addContainerGap(248, Short.MAX_VALUE))
        );

        Estadisticas.add(EstadisticasGenerales);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Estadisticas Generales"));

        jLabel34.setText("Ciclos ejecutando:");

        jLabel35.setText("Procesos totales:");

        jLabel36.setText("Procesos I/O bound:");

        jLabel37.setText("Procesos CPU bound:");

        jLabel38.setText("Throughput");

        lblStatsTotales3.setText("0");

        lblStatsIOBound3.setText("0");

        lblStatsCPUBound3.setText("0");

        lblStatsCicloActual3.setText("0");

        lblStatsThroughput3.setText("0");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsTotales3))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsIOBound3)))
                .addGap(125, 125, 125)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCPUBound3)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsThroughput3))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCicloActual3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jLabel36)
                    .addComponent(jLabel38)
                    .addComponent(lblStatsTotales3)
                    .addComponent(lblStatsCPUBound3)
                    .addComponent(lblStatsThroughput3))
                .addGap(27, 27, 27)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel37)
                    .addComponent(lblStatsIOBound3)
                    .addComponent(lblStatsCicloActual3))
                .addContainerGap(248, Short.MAX_VALUE))
        );

        Estadisticas.add(jPanel9);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Estadisticas Generales"));

        jLabel29.setText("Procesos Totales Terminados:");

        jLabel30.setText("Procesos I/O Bound Terminados:");

        jLabel31.setText("Procesos CPU bound Terminados:");

        jLabel32.setText("Ciclo Actual:");

        jLabel33.setText("Throughput General:");

        lblStatsTotales2.setText("0");

        lblStatsIOBound2.setText("0");

        lblStatsCPUBound2.setText("0");

        lblStatsCicloActual2.setText("0");

        lblStatsThroughput2.setText("0");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsTotales2))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsIOBound2)))
                .addGap(125, 125, 125)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCPUBound2)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsThroughput2))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCicloActual2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jLabel31)
                    .addComponent(jLabel33)
                    .addComponent(lblStatsTotales2)
                    .addComponent(lblStatsCPUBound2)
                    .addComponent(lblStatsThroughput2))
                .addGap(27, 27, 27)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jLabel32)
                    .addComponent(lblStatsIOBound2)
                    .addComponent(lblStatsCicloActual2))
                .addContainerGap(248, Short.MAX_VALUE))
        );

        Estadisticas.add(jPanel8);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Estadisticas Generales"));

        jLabel39.setText("Procesos Totales Terminados:");

        jLabel40.setText("Procesos I/O Bound Terminados:");

        jLabel41.setText("Procesos CPU bound Terminados:");

        jLabel42.setText("Ciclo Actual:");

        jLabel43.setText("Throughput General:");

        lblStatsTotales4.setText("0");

        lblStatsIOBound4.setText("0");

        lblStatsCPUBound4.setText("0");

        lblStatsCicloActual4.setText("0");

        lblStatsThroughput4.setText("0");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsTotales4))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsIOBound4)))
                .addGap(125, 125, 125)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCPUBound4)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsThroughput4))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCicloActual4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jLabel41)
                    .addComponent(jLabel43)
                    .addComponent(lblStatsTotales4)
                    .addComponent(lblStatsCPUBound4)
                    .addComponent(lblStatsThroughput4))
                .addGap(27, 27, 27)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jLabel42)
                    .addComponent(lblStatsIOBound4)
                    .addComponent(lblStatsCicloActual4))
                .addContainerGap(248, Short.MAX_VALUE))
        );

        Estadisticas.add(jPanel10);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Estadisticas Generales"));

        jLabel44.setText("Procesos Totales Terminados:");

        jLabel45.setText("Procesos I/O Bound Terminados:");

        jLabel46.setText("Procesos CPU bound Terminados:");

        jLabel47.setText("Ciclo Actual:");

        jLabel48.setText("Throughput General:");

        lblStatsTotales5.setText("0");

        lblStatsIOBound5.setText("0");

        lblStatsCPUBound5.setText("0");

        lblStatsCicloActual5.setText("0");

        lblStatsThroughput5.setText("0");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsTotales5))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsIOBound5)))
                .addGap(125, 125, 125)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCPUBound5)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel48)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsThroughput5))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCicloActual5)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(jLabel46)
                    .addComponent(jLabel48)
                    .addComponent(lblStatsTotales5)
                    .addComponent(lblStatsCPUBound5)
                    .addComponent(lblStatsThroughput5))
                .addGap(27, 27, 27)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(jLabel47)
                    .addComponent(lblStatsIOBound5)
                    .addComponent(lblStatsCicloActual5))
                .addContainerGap(248, Short.MAX_VALUE))
        );

        Estadisticas.add(jPanel11);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Estadisticas Generales"));

        jLabel24.setText("Procesos Totales Terminados:");

        jLabel25.setText("Procesos I/O Bound Terminados:");

        jLabel26.setText("Procesos CPU bound Terminados:");

        jLabel27.setText("Ciclo Actual:");

        jLabel28.setText("Throughput General:");

        lblStatsTotales1.setText("0");

        lblStatsIOBound1.setText("0");

        lblStatsCPUBound1.setText("0");

        lblStatsCicloActual1.setText("0");

        lblStatsThroughput1.setText("0");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsTotales1))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsIOBound1)))
                .addGap(125, 125, 125)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCPUBound1)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsThroughput1))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCicloActual1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jLabel26)
                    .addComponent(jLabel28)
                    .addComponent(lblStatsTotales1)
                    .addComponent(lblStatsCPUBound1)
                    .addComponent(lblStatsThroughput1))
                .addGap(27, 27, 27)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel27)
                    .addComponent(lblStatsIOBound1)
                    .addComponent(lblStatsCicloActual1))
                .addContainerGap(248, Short.MAX_VALUE))
        );

        Estadisticas.add(jPanel7);

        jTabbedPane1.addTab("Estadisticas", Estadisticas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearProcesoActionPerformed
        // TODO add your handling code here:
        try {
                // 1. Leer datos comunes de la interfaz
//                int id = so.getProcessCounter(); // Usamos un getter ahora (lo crearemos)
               
                int instrucciones = (int) spinnerInstrucciones.getValue();

                // --- VALORES FIJOS TEMPORALES (¡DEBERÍAS AÑADIR SPINNERS PARA ESTOS!) ---
                long tiempoESFijo = 5L; // Tiempo ES fijo temporal (usado por CPU Bound)
                int prioridad = 0; // Prioridad fija temporal
                // --- FIN VALORES FIJOS ---

                // Determinar tipo
                String tipoStr = (String) comboTipo.getSelectedItem();
                Proceso.Tipo tipo;
                if (tipoStr.equals("CPU bound")) {
                    tipo = Proceso.Tipo.CPU_BOUND;
                } else if (tipoStr.equals("I/O bound")) {
                    tipo = Proceso.Tipo.IO_BOUND;
                } else {
                    tipo = Proceso.Tipo.CPU_BOUND; // Asumimos Normal si no es ninguno
                }

                // 2. Llamar al método crearProceso adecuado
                if (tipo == Proceso.Tipo.IO_BOUND) {
                    // Leer valores específicos de I/O Bound
                    int instParaES = (int) spinnerCiclosExcepcion.getValue();
                    int ciclosParaES = (int) spinnerCiclosSatisfacer.getValue();

                    // Llamar a la versión IO Bound de crearProceso
                    so.crearProceso(tipo, instrucciones, prioridad, instParaES, ciclosParaES); 
                    // Nota: Pasé 0 como tiempoES porque este constructor no lo usa directamente para I/O

                } else { 
                    // Para CPU_BOUND 
                    // Llamar a la versión NO IO Bound de crearProceso
                    so.crearProceso(tipo, instrucciones, prioridad);
                }

            } catch (Exception e) {
                // Mostrar un error si algo sale mal
                javax.swing.JOptionPane.showMessageDialog(this, "Error al crear proceso: " + e.getMessage());
                e.printStackTrace(); // Imprime más detalles del error en la consola
            }
    }//GEN-LAST:event_btnCrearProcesoActionPerformed

    private void btnGuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCambiosActionPerformed
        // TODO add your handling code here:
        String politicaSeleccionada = (String) comboPolitica.getSelectedItem();
        ISchedulingAlgorithm nuevoAlgoritmo;

        switch (politicaSeleccionada) {
            case "FCFS":
                nuevoAlgoritmo = new FIFOScheduling();
                break;
            case "Round Robin":
                nuevoAlgoritmo = new RRScheduling();
                break;
            case "SPN":
                nuevoAlgoritmo = new SPNScheduling();
                break;
            case "SRT":
                nuevoAlgoritmo = new SRTScheduling();
                break;
            case "HRRN":
                nuevoAlgoritmo = new HRRNScheduling();
                break;
            case "Feedback":
                nuevoAlgoritmo = new FeedbackScheduling();
                break;
            default:
                nuevoAlgoritmo = new FIFOScheduling(); // Default
        }

        // Llama al método del SO que ya existe
        so.setAlgoritmo(nuevoAlgoritmo); 

        // Ajusta el quantum de la CPU según el algoritmo
        if (nuevoAlgoritmo.hasQuantum()) {
            so.setCPUQuantum(5); // 5 Ticks por defecto, puedes hacerlo configurable
        } else {
            so.setCPUQuantum(0); // 0 significa sin quantum
        }
    }//GEN-LAST:event_btnGuardarCambiosActionPerformed

    private void comboTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTipoActionPerformed

    private void comboTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTipoItemStateChanged
// Verifica si el estado del item cambió (fue seleccionado o deseleccionado)
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String tipoSeleccionado = (String) comboTipo.getSelectedItem();

            boolean esIOBound = tipoSeleccionado.equals("I/O bound");

            // Habilita o deshabilita los spinners basados en la selección
            spinnerCiclosExcepcion.setEnabled(esIOBound);
            spinnerCiclosSatisfacer.setEnabled(esIOBound);
        } 
    }//GEN-LAST:event_comboTipoItemStateChanged

    private void btnAplicarDuracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAplicarDuracionActionPerformed
        // TODO add your handling code here:
        try {
            // Leer el valor del spinner
            int nuevoTiempoMs = (int) spinnerDuracionCiclo.getValue();

            // Validar (aunque el spinner ya tiene límites, una doble verificación es buena)
            if (nuevoTiempoMs > 0) {
                // Llamar al método del SO para aplicar el cambio
                so.setDuracionCiclo(nuevoTiempoMs);
                guardarConfiguracionCompleta();
                
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "La duración debe ser mayor que cero.");
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al aplicar duración: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAplicarDuracionActionPerformed

    private void btnGuardarDefaultsProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarDefaultsProcesoActionPerformed
        // TODO add your handling code here:
        
        guardarConfiguracionCompleta(); // Simplemente llama al método que guarda todo
        
    }//GEN-LAST:event_btnGuardarDefaultsProcesoActionPerformed

    private void btnCargarProcesosArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarProcesosArchivoActionPerformed
        // TODO add your handling code here:
            
        cargarProcesosDesdeArchivo();
        
    }//GEN-LAST:event_btnCargarProcesosArchivoActionPerformed

    /**
     * @param args the command line arguments
     */

    // En SimuladorGUI.java

public void actualizarGUI() {
    // 1. Actualizar Reloj
    lblRelojGlobal.setText(String.valueOf(so.getClock().getTic()));

    // 2. Actualizar CPU
    Proceso pCPU = so.getCpu().getProcesoActual();
    if (pCPU != null) {
        lblCpuProceso.setText(pCPU.getNombre());
        lblCpuID.setText(String.valueOf(pCPU.getId()));
        lblCpuPC.setText(String.valueOf(pCPU.getProgramCounter()));
        lblCpuMAR.setText(String.valueOf(pCPU.getMemoryAddressRegister()));
        lblCpuStatus.setText(pCPU.getEstado().toString());
        lblCpuTipo.setText(pCPU.getTipo().toString());
    } else {
        lblCpuProceso.setText("N/A");
        lblCpuID.setText("N/A");
        lblCpuPC.setText("N/A");
        lblCpuMAR.setText("N/A");
        lblCpuStatus.setText("IDLE");
        lblCpuTipo.setText("N/A");
    }

    // 3. Actualizar Paneles de Colas (NUEVA LÓGICA)
    actualizarPanelCola(so.getColaListos(), panelContenidoListos);
    actualizarPanelCola(so.getColaBloqueados(), panelContenidoBloqueados);
    actualizarPanelCola(so.getColaTerminados(), panelContenidoTerminados);
    
    // 4. Actualizar Estadísticas
    long cicloActual = so.getClock().getTic();
    int terminadosTotales = so.getStatProcesosTotalesTerminados();

    lblStatsTotales.setText(String.valueOf(terminadosTotales));
    lblStatsIOBound.setText(String.valueOf(so.getStatIoBoundTerminados()));
    lblStatsCPUBound.setText(String.valueOf(so.getStatCpuBoundTerminados()));
    lblStatsCicloActual.setText(String.valueOf(cicloActual));

    // Calcular Throughput (Procesos / Ticks)
    // El PDF pide "Procesos completados por unidad de tiempo" [cite: 23]
    if (cicloActual > 0) {
        double throughput = (double) terminadosTotales / cicloActual;
        // Formatear a 6 decimales
        lblStatsThroughput.setText(String.format("%.6f", throughput));
    } else {
        lblStatsThroughput.setText("0.0");
    }
    
    if (jTabbedPane1.getSelectedComponent() == panelGrafico.getParent()) {
     actualizarGraficoThroughput();
    }
    
}

// Method to load configuration from config.json
private void cargarConfiguracion() {
    SimConfig config = null;
    Gson gson = new Gson();

    // Try to read the config.json file
    try (FileReader reader = new FileReader("config.json")) {
        config = gson.fromJson(reader, SimConfig.class);
        System.out.println("Configuration loaded from config.json");
    } catch (IOException e) {
        System.err.println("Could not load config.json (using defaults): " + e.getMessage());
        // File not found or error reading, create a default config
        config = new SimConfig(); // Uses the default 500ms
    }

        // Apply the loaded (or default) configuration
    if (config != null) {
        // --- Aplicar Duración Ciclo (como antes) ---
        long loadedDuration = config.getDuracionCicloMs();
        spinnerDuracionCiclo.setValue((int) loadedDuration);
        if (so != null) {
            so.setDuracionCiclo(loadedDuration);
        }

        // --- Aplicar Defaults de Creación de Proceso ---
        spinnerInstrucciones.setValue(config.getDefaultInstrucciones());
        comboTipo.setSelectedItem(config.getDefaultTipoProceso());
        spinnerCiclosExcepcion.setValue(config.getDefaultCiclosGenExcepcion());
        spinnerCiclosSatisfacer.setValue(config.getDefaultCiclosSatExcepcion());

        // Asegurarse que los spinners de E/S se habiliten/deshabiliten correctamente
        boolean esIOBound = config.getDefaultTipoProceso().equals("I/O bound");
        spinnerCiclosExcepcion.setEnabled(esIOBound);
        spinnerCiclosSatisfacer.setEnabled(esIOBound);

    } else {
         // Si config es null (error grave), podrías poner valores fijos aquí
         System.err.println("Error crítico: config object es null en cargarConfiguracion.");
         spinnerDuracionCiclo.setValue(500);
         spinnerInstrucciones.setValue(10);
         comboTipo.setSelectedItem("CPU bound");
         spinnerCiclosExcepcion.setValue(5);
         spinnerCiclosSatisfacer.setValue(10);
         spinnerCiclosExcepcion.setEnabled(false);
         spinnerCiclosSatisfacer.setEnabled(false);
    }
}

// Guarda TODA la configuración actual (ciclo + defaults de proceso) en config.json
private void guardarConfiguracionCompleta() {
    SimConfig config = new SimConfig(); // Crea un objeto nuevo

    try {
        // Leer duración del ciclo
        config.setDuracionCicloMs((int) spinnerDuracionCiclo.getValue());

        // Leer defaults de creación de proceso
        config.setDefaultInstrucciones((int) spinnerInstrucciones.getValue());
        config.setDefaultTipoProceso((String) comboTipo.getSelectedItem());
        config.setDefaultCiclosGenExcepcion((int) spinnerCiclosExcepcion.getValue());
        config.setDefaultCiclosSatExcepcion((int) spinnerCiclosSatisfacer.getValue());

    } catch (Exception e) {
        System.err.println("Error leyendo valores de la GUI para guardar config: " + e.getMessage());
        // Podrías mostrar un error al usuario aquí
        javax.swing.JOptionPane.showMessageDialog(this, "Error al leer valores para guardar: " + e.getMessage(), "Error Guardando Config", javax.swing.JOptionPane.ERROR_MESSAGE);
        return; // No guardar si hay error leyendo
    }

    // Guardar a JSON (igual que antes)
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    String jsonString = gson.toJson(config);

    try (FileWriter writer = new FileWriter("config.json")) {
        writer.write(jsonString);
        System.out.println("Configuración completa guardada en config.json");
        // Opcional: Mostrar mensaje de éxito al usuario
        // javax.swing.JOptionPane.showMessageDialog(this, "Defaults guardados.");
    } catch (IOException e) {
        System.err.println("Error guardando configuración completa en config.json: " + e.getMessage());
        javax.swing.JOptionPane.showMessageDialog(this, "Error guardando archivo de configuración:\n" + e.getMessage(), "Config Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
}

// Método ayudante para no repetir código
// Método ayudante para actualizar un JPanel con bloques de procesos
 private void actualizarPanelCola(Cola cola, javax.swing.JPanel panelDestino) {
     // 1. Limpiar los bloques anteriores del panel
     panelDestino.removeAll();

     // 2. Iterar sobre la cola usando tu clase Lista/Nodo
     if (cola != null && !cola.isEmpty()) {
         Nodo nodoActual = cola.getFrente();
         while (nodoActual != null) {
             Proceso proceso = nodoActual.getProceso();
             if (proceso != null) {
                 // 3. Crear una instancia del bloque visual
                 ProcesoBloqueGUI bloque = new ProcesoBloqueGUI();
                 // 4. Llenar el bloque con los datos del proceso
                 bloque.setProcesoData(proceso);
                 // 5. Añadir el bloque al panel destino
                 panelDestino.add(bloque);
             }
             nodoActual = nodoActual.getSiguiente();
         }
     }

     // 6. Refrescar el layout del panel para mostrar los nuevos bloques
     panelDestino.revalidate();
     panelDestino.repaint();
 }

private void actualizarGraficoThroughput() {
    // 1. Crear el set de datos para el gráfico de barras
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    String seriesKey = "Throughput"; // Nombre de la serie (leyenda)

    // 2. Iterar sobre todos los tipos de políticas definidos en el Enum
    for (SchedulingType tipo : SchedulingType.values()) {
        // Obtener datos del backend para esta política específica
        int terminados = so.getTerminadosPorPolitica(tipo); // Usa el nuevo getter
        long ciclos = so.getCiclosPorPolitica(tipo); // Usa el nuevo getter

        // Calcular el throughput específico (procesos terminados / ciclos activos)
        double throughput = 0.0;
        if (ciclos > 0) { // Evitar división por cero
            throughput = (double) terminados / ciclos;
        }

        // Usar el nombre del Enum como etiqueta para la barra en el eje X
        String nombrePolitica = tipo.toString(); // Ej: FCFS, ROUNDROBIN, SPN...

        // Añadir el valor calculado al dataset
        dataset.addValue(throughput, seriesKey, nombrePolitica);
    }

    // --- El resto del código para crear y mostrar el gráfico sigue igual ---

    // 3. Crear el gráfico de barras
    JFreeChart barChart = ChartFactory.createBarChart(
        "Comparación de Throughputs", // Título
        "Política",                   // Eje X
        "Throughput",                 // Eje Y
        dataset                       // Datos actualizados
    );

    // 4. Crear el panel que contiene el gráfico
    ChartPanel chartPanel = new ChartPanel(barChart);

    // 5. Añadir/Actualizar el panel del gráfico en nuestro 'panelGrafico'
    panelGrafico.removeAll(); // Limpia el panel
    panelGrafico.add(chartPanel, BorderLayout.CENTER); // Añade el gráfico actualizado
    panelGrafico.validate(); // Refresca el panel
    panelGrafico.repaint(); // Asegura redibujado
}

    public javax.swing.JTextArea getAreaLog() {
        return areaLog;
    }
    
    // Método principal llamado por el botón
private void cargarProcesosDesdeArchivo() {
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setCurrentDirectory(new File(".")); // Directorio del proyecto
    fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Procesos (.json, .csv)", "json", "csv"));
    fileChooser.setDialogTitle("Seleccionar archivo de procesos (.json o .csv)");

    int result = fileChooser.showOpenDialog(this);

    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        String fileName = selectedFile.getName().toLowerCase();
        Lista<ProcesoConfig> procesosParaCargar = null; // Usa tu clase Lista

        try {
            // Determinar tipo y parsear
            if (fileName.endsWith(".json")) {
                procesosParaCargar = parseJson(selectedFile);
            } else if (fileName.endsWith(".csv")) {
                procesosParaCargar = parseCsv(selectedFile);
            } else {
                mostrarError("Tipo de archivo no soportado. Seleccione .json o .csv.");
                return;
            }

            // Validar resultado del parseo
            if (procesosParaCargar == null || procesosParaCargar.isEmpty()) {
               mostrarAdvertencia("El archivo está vacío o tiene un formato incorrecto.");
               return;
            }

            // Crear los procesos en el SO
            crearProcesosDesdeConfig(procesosParaCargar);

            mostrarInformacion("Procesos cargados desde " + selectedFile.getName());

        } catch (FileNotFoundException e) {
             mostrarError("Archivo no encontrado:\n" + e.getMessage());
        } catch (IOException e) {
             mostrarError("Error al leer el archivo:\n" + e.getMessage());
        } catch (com.google.gson.JsonSyntaxException e) {
             mostrarError("Error en el formato del archivo JSON:\n" + e.getMessage());
        } catch (Exception e) {
             mostrarError("Ocurrió un error inesperado al procesar el archivo:\n" + e.getMessage());
             e.printStackTrace(); // Imprime detalles en consola
        }
    }
}

// Método para parsear JSON
private Lista<ProcesoConfig> parseJson(File file) throws IOException, com.google.gson.JsonSyntaxException {
    Gson gson = new Gson();
    Lista<ProcesoConfig> listaProcesos = new Lista<>(); // Crea tu Lista
    try (FileReader reader = new FileReader(file)) {
        // Gson parsea a un array normal
        ProcesoConfig[] procesosArray = gson.fromJson(reader, ProcesoConfig[].class);

        // Copia manualmente del array a tu Lista
        if (procesosArray != null) {
            for (ProcesoConfig proc : procesosArray) {
                if (proc != null) { // Evitar nulls si el JSON tiene entradas vacías
                   listaProcesos.add(proc);
                }
            }
        }
    }
    return listaProcesos;
}

private Lista<ProcesoConfig> parseCsv(File file) throws IOException, NumberFormatException {
    // Usa tu clase Lista directamente
    Lista<ProcesoConfig> procesos = new Lista<>();
    try (BufferedReader br = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
        String line;
        boolean isFirstLine = true;

        while ((line = br.readLine()) != null) {
            if (isFirstLine) {
                isFirstLine = false;
                continue;
            }
            if (line.trim().isEmpty() || line.trim().startsWith("#")) {
                continue;
            }
            String[] fields = line.split(",");

            if (fields.length < 4) {
                 System.err.println("WARN: Línea CSV con campos insuficientes, omitida: " + line);
                 continue;
            }

            try {
                ProcesoConfig proc = new ProcesoConfig();

                // Asignar usando setters
                proc.setNombreManual(fields[0].trim());
                proc.setInstruccionesManual(Integer.parseInt(fields[1].trim()));
                proc.setTipoManual(fields[2].trim());
                proc.setTamanoManual(Integer.parseInt(fields[3].trim()));

                // Campos opcionales IO_BOUND
                if (fields.length > 4 && !fields[4].trim().isEmpty()) {
                    proc.setInstruccionesParaESManual(Integer.parseInt(fields[4].trim()));
                }
                if (fields.length > 5 && !fields[5].trim().isEmpty()) {
                    proc.setCiclosParaCompletarESManual(Integer.parseInt(fields[5].trim()));
                }

                // Añade a tu Lista personalizada
                procesos.add(proc);

            } catch (NumberFormatException e) {
                System.err.println("WARN: Error de formato numérico en línea CSV, omitida: " + line + " -> " + e.getMessage());
            } catch (ArrayIndexOutOfBoundsException e) {
                 System.err.println("WARN: Faltan campos esperados en línea CSV, omitida: " + line);
            } catch (Exception e) {
                System.err.println("WARN: Error procesando línea CSV, omitida: " + line + " -> " + e.getMessage());
            }
        }
    }
    return procesos;
}

// Nuevo método para centralizar la creación de procesos
// Cambia el tipo del parámetro y la forma de iterar
    private void crearProcesosDesdeConfig(Lista<ProcesoConfig> configs) { // <-- Cambio 1: Usa tu clase Lista
         // Iterar sobre tu Lista personalizada usando índices
         for (int i = 0; i < configs.size(); i++) { // <-- Cambio 2: Bucle for normal
             ProcesoConfig configProc = configs.get(i); // <-- Cambio 2: Obtener por índice

             if (configProc == null) continue; // Saltar si el elemento es null

            // --- El RESTO del código dentro del bucle SIGUE IGUAL ---

            // Validaciones básicas (mejoradas)
            if (configProc.getTipo() == null || configProc.getTipo().trim().isEmpty() ||
                configProc.getInstrucciones() <= 0 || configProc.getTamano() <= 0) {
                System.err.println("WARN: Proceso inválido o incompleto, omitido: Nombre=" + configProc.getNombre());
                continue;
            }

            // Convertir String a Enum
            Proceso.Tipo tipoEnum;
            try {
                tipoEnum = Proceso.Tipo.valueOf(configProc.getTipo().trim().toUpperCase());
            } catch (IllegalArgumentException e) {
                System.err.println("WARN: Tipo de proceso desconocido '" + configProc.getTipo() + "' para " + configProc.getNombre() );
            }

            int id = so.getProcessCounter(); // SO asigna ID incremental
            int prioridad = 0; // Fijo por ahora

            // Pasar nombre opcional al SO
            if (configProc.getNombre() != null && !configProc.getNombre().trim().isEmpty()) {
                so.setNextProcessName(configProc.getNombre());
            }

            // Llamar al método crearProceso adecuado
            if (tipoEnum == Proceso.Tipo.IO_BOUND) {
                so.crearProceso(id, tipoEnum, configProc.getInstrucciones(), configProc.getTamano(),
                                0, // tiempoES no usado aquí
                                prioridad, configProc.getInstruccionesParaES(), configProc.getCiclosParaCompletarES());
            } else {
                long tiempoESFijo = 5L; // Valor placeholder
                so.crearProceso(id, tipoEnum, configProc.getInstrucciones(), configProc.getTamano(),
                                tiempoESFijo, prioridad);
            }
         } // Fin del bucle for
    } // Fin del método

// Métodos ayudantes para mostrar mensajes (opcional, pero ordena el código)
private void mostrarError(String mensaje) {
    javax.swing.JOptionPane.showMessageDialog(this, mensaje, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
}
private void mostrarAdvertencia(String mensaje) {
    javax.swing.JOptionPane.showMessageDialog(this, mensaje, "Advertencia", javax.swing.JOptionPane.WARNING_MESSAGE);
}
 private void mostrarInformacion(String mensaje) {
    javax.swing.JOptionPane.showMessageDialog(this, mensaje, "Información", javax.swing.JOptionPane.INFORMATION_MESSAGE);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Configuracion;
    private javax.swing.JPanel Estadisticas;
    private javax.swing.JPanel EstadisticasGenerales;
    private javax.swing.JPanel Graficos;
    private javax.swing.JPanel Simulador;
    private javax.swing.JTextArea areaLog;
    private javax.swing.JButton btnAplicarDuracion;
    private javax.swing.JButton btnCargarProcesosArchivo;
    private javax.swing.JButton btnCrearProceso;
    private javax.swing.JButton btnGuardarCambios;
    private javax.swing.JButton btnGuardarDefaultsProceso;
    private javax.swing.JComboBox<String> comboPolitica;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCpuID;
    private javax.swing.JLabel lblCpuMAR;
    private javax.swing.JLabel lblCpuPC;
    private javax.swing.JLabel lblCpuProceso;
    private javax.swing.JLabel lblCpuStatus;
    private javax.swing.JLabel lblCpuTipo;
    private javax.swing.JLabel lblRelojGlobal;
    private javax.swing.JLabel lblStatsCPUBound;
    private javax.swing.JLabel lblStatsCPUBound1;
    private javax.swing.JLabel lblStatsCPUBound2;
    private javax.swing.JLabel lblStatsCPUBound3;
    private javax.swing.JLabel lblStatsCPUBound4;
    private javax.swing.JLabel lblStatsCPUBound5;
    private javax.swing.JLabel lblStatsCicloActual;
    private javax.swing.JLabel lblStatsCicloActual1;
    private javax.swing.JLabel lblStatsCicloActual2;
    private javax.swing.JLabel lblStatsCicloActual3;
    private javax.swing.JLabel lblStatsCicloActual4;
    private javax.swing.JLabel lblStatsCicloActual5;
    private javax.swing.JLabel lblStatsIOBound;
    private javax.swing.JLabel lblStatsIOBound1;
    private javax.swing.JLabel lblStatsIOBound2;
    private javax.swing.JLabel lblStatsIOBound3;
    private javax.swing.JLabel lblStatsIOBound4;
    private javax.swing.JLabel lblStatsIOBound5;
    private javax.swing.JLabel lblStatsThroughput;
    private javax.swing.JLabel lblStatsThroughput1;
    private javax.swing.JLabel lblStatsThroughput2;
    private javax.swing.JLabel lblStatsThroughput3;
    private javax.swing.JLabel lblStatsThroughput4;
    private javax.swing.JLabel lblStatsThroughput5;
    private javax.swing.JLabel lblStatsTotales;
    private javax.swing.JLabel lblStatsTotales1;
    private javax.swing.JLabel lblStatsTotales2;
    private javax.swing.JLabel lblStatsTotales3;
    private javax.swing.JLabel lblStatsTotales4;
    private javax.swing.JLabel lblStatsTotales5;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JPanel panelContenidoBloqueados;
    private javax.swing.JPanel panelContenidoListos;
    private javax.swing.JPanel panelContenidoTerminados;
    private javax.swing.JPanel panelDerecho;
    private javax.swing.JPanel panelGrafico;
    private javax.swing.JPanel panelIzquierdo;
    private javax.swing.JSpinner spinnerCiclosExcepcion;
    private javax.swing.JSpinner spinnerCiclosSatisfacer;
    private javax.swing.JSpinner spinnerDuracionCiclo;
    private javax.swing.JSpinner spinnerInstrucciones;
    // End of variables declaration//GEN-END:variables
}
