/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sistemasoperativos1;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.nio.file.Files;
import java.nio.charset.StandardCharsets;
import CoreV2.ProcesoConfig; // ¡Importante!
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import CoreV2.SimConfig;
import CoreV2.OperatingSystem; 
import CoreV2.Proceso; 
import CoreV2.Cola; 
import CoreV2.AlgorithmsStrategies.*;
import CoreV2.Nodo;
import CoreV2.CPU;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import java.awt.BorderLayout;
import CoreV2.Lista;
import CoreV2.AlgorithmsStrategies.ISchedulingAlgorithm.SchedulingType;
import CoreV2.Clock;
import java.awt.Color;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import sistemasoperativos1.ProcesoBloqueGUI;
import sistemasoperativos1.Main;


/**
 *
 * @author juanr
 */
public class SimuladorGUI extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(SimuladorGUI.class.getName());
    
    private OperatingSystem so;
    private CPU cpu;
    private Clock clock;
    
    /**
     * Creates new form SimuladorGUI
     */
public SimuladorGUI(OperatingSystem so, CPU cpu, Clock clocl) {
        initComponents();
        this.so = so;
        this.cpu = cpu;
        this.clock = clock;
            
        
        boolean ioInicial = comboTipo.getSelectedItem().equals("I/O bound");
        spinnerCiclosExcepcion.setEnabled(ioInicial);
        spinnerCiclosSatisfacer.setEnabled(ioInicial);
        cargarConfiguracion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Simulador = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        panelCentral = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelContenidoListos = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelContenidoBloqueados = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        panelContenidoTerminados = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        areaLog = new javax.swing.JTextArea();
        panelDerecho = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        lblCpuProceso = new javax.swing.JLabel();
        lblCpuID = new javax.swing.JLabel();
        lblCpuPC = new javax.swing.JLabel();
        lblCpuMAR = new javax.swing.JLabel();
        lblCpuStatus = new javax.swing.JLabel();
        lblCpuTipo = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        panelIzquierdo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        spinnerInstrucciones = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        spinnerCiclosExcepcion = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnerCiclosSatisfacer = new javax.swing.JSpinner();
        btnCrearProceso = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        comboPolitica = new javax.swing.JComboBox<>();
        btnGuardarCambios = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lblRelojGlobal = new javax.swing.JLabel();
        btnGuardarDefaultsProceso = new javax.swing.JButton();
        btnCargarProcesosArchivo = new javax.swing.JButton();
        jLabel49 = new javax.swing.JLabel();
        Configuracion = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        spinnerDuracionCiclo = new javax.swing.JSpinner();
        btnAplicarDuracion = new javax.swing.JButton();
        Graficos = new javax.swing.JPanel();
        panelGrafico = new javax.swing.JPanel();
        panelGrafico2 = new java.awt.Panel();
        panelGrafico3 = new java.awt.Panel();
        panelGrafica4 = new java.awt.Panel();
        Estadisticas = new javax.swing.JPanel();
        EstadisticasGenerales = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        lblStatsTotales = new javax.swing.JLabel();
        lblStatsIOBound = new javax.swing.JLabel();
        lblStatsCPUBound = new javax.swing.JLabel();
        lblStatsCicloActual = new javax.swing.JLabel();
        lblStatsThroughput = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setLayout(new java.awt.BorderLayout());

        panelCentral.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Colas De Listos");
        panelCentral.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, -1, -1));

        panelContenidoListos.setLayout(new javax.swing.BoxLayout(panelContenidoListos, javax.swing.BoxLayout.X_AXIS));
        jScrollPane1.setViewportView(panelContenidoListos);

        panelCentral.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 690, 110));

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Cola de Bloqueados");
        panelCentral.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, -1, -1));

        panelContenidoBloqueados.setLayout(new javax.swing.BoxLayout(panelContenidoBloqueados, javax.swing.BoxLayout.X_AXIS));
        jScrollPane2.setViewportView(panelContenidoBloqueados);

        panelCentral.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 690, 120));

        jLabel9.setBackground(new java.awt.Color(51, 51, 51));
        jLabel9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Cola de Terminados");
        panelCentral.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 330, -1, -1));

        panelContenidoTerminados.setLayout(new javax.swing.BoxLayout(panelContenidoTerminados, javax.swing.BoxLayout.X_AXIS));
        jScrollPane3.setViewportView(panelContenidoTerminados);

        panelCentral.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 350, 690, 120));

        jLabel23.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(51, 51, 51));
        jLabel23.setText("Log de Eventos");
        panelCentral.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 480, -1, -1));

        areaLog.setEditable(false);
        areaLog.setColumns(20);
        areaLog.setRows(5);
        jScrollPane4.setViewportView(areaLog);

        panelCentral.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 690, 160));

        panelDerecho.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("CPU ");
        panelDerecho.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, -1, -1));

        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("Proceso en Ejecución:");
        panelDerecho.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setText("ID: ");
        panelDerecho.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText("PC: ");
        panelDerecho.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 40, -1));

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("MAR:");
        panelDerecho.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 167, -1, -1));

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 51, 51));
        jLabel15.setText("Status:");
        panelDerecho.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel16.setText("Tipo:");
        panelDerecho.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        lblCpuProceso.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCpuProceso.setForeground(new java.awt.Color(51, 51, 51));
        lblCpuProceso.setText("---");
        panelDerecho.add(lblCpuProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 25, -1));

        lblCpuID.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCpuID.setForeground(new java.awt.Color(51, 51, 51));
        lblCpuID.setText("---");
        panelDerecho.add(lblCpuID, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 122, -1));

        lblCpuPC.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCpuPC.setForeground(new java.awt.Color(51, 51, 51));
        lblCpuPC.setText("---");
        panelDerecho.add(lblCpuPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 93, -1));

        lblCpuMAR.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCpuMAR.setForeground(new java.awt.Color(51, 51, 51));
        lblCpuMAR.setText("---");
        panelDerecho.add(lblCpuMAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 87, -1));

        lblCpuStatus.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCpuStatus.setForeground(new java.awt.Color(51, 51, 51));
        lblCpuStatus.setText("---");
        panelDerecho.add(lblCpuStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 84, -1));

        lblCpuTipo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCpuTipo.setForeground(new java.awt.Color(51, 51, 51));
        lblCpuTipo.setText("---");
        panelDerecho.add(lblCpuTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 117, -1));

        jLabel50.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaces/Diseño sin título.jpg"))); // NOI18N
        panelDerecho.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -20, 230, 330));

        panelCentral.add(panelDerecho, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 40, 180, 290));

        panelIzquierdo.setOpaque(false);
        panelIzquierdo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Cantidad de Instrucciones");
        panelIzquierdo.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));
        panelIzquierdo.add(spinnerInstrucciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 34, 70, -1));

        jLabel2.setBackground(new java.awt.Color(51, 51, 51));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Tipo");
        panelIzquierdo.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 68, -1, -1));

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPU bound", "I/O bound" }));
        comboTipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTipoItemStateChanged(evt);
            }
        });
        comboTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoActionPerformed(evt);
            }
        });
        panelIzquierdo.add(comboTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 90, -1, -1));

        jLabel3.setBackground(new java.awt.Color(51, 51, 51));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Ciclos para generar Excepción");
        panelIzquierdo.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 220, 25));
        panelIzquierdo.add(spinnerCiclosExcepcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 70, -1));

        jLabel4.setBackground(new java.awt.Color(51, 51, 51));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Ciclos para Satisfacer Excepción");
        panelIzquierdo.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));
        panelIzquierdo.add(spinnerCiclosSatisfacer, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 210, 70, -1));

        btnCrearProceso.setText("Crear Proceso");
        btnCrearProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearProcesoActionPerformed(evt);
            }
        });
        panelIzquierdo.add(btnCrearProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 250, -1, -1));

        jLabel5.setBackground(new java.awt.Color(51, 51, 51));
        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Cambiar Política de Planificación");
        panelIzquierdo.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        comboPolitica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "Round Robin", "SPN", "SRT", "HRRN", "Feedback" }));
        panelIzquierdo.add(comboPolitica, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, -1, -1));

        btnGuardarCambios.setText("Guardar Cambios");
        btnGuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCambiosActionPerformed(evt);
            }
        });
        panelIzquierdo.add(btnGuardarCambios, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 370, -1, -1));

        jLabel6.setBackground(new java.awt.Color(51, 51, 51));
        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Ciclo de reloj global");
        panelIzquierdo.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 440, -1, 20));

        lblRelojGlobal.setBackground(new java.awt.Color(51, 51, 51));
        lblRelojGlobal.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        lblRelojGlobal.setForeground(new java.awt.Color(51, 51, 51));
        lblRelojGlobal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRelojGlobal.setText("0");
        panelIzquierdo.add(lblRelojGlobal, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 460, 120, 63));

        btnGuardarDefaultsProceso.setText("Guardar Default");
        btnGuardarDefaultsProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarDefaultsProcesoActionPerformed(evt);
            }
        });
        panelIzquierdo.add(btnGuardarDefaultsProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, 10, 0));

        btnCargarProcesosArchivo.setText("Cargar Procesos Archivo");
        btnCargarProcesosArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarProcesosArchivoActionPerformed(evt);
            }
        });
        panelIzquierdo.add(btnCargarProcesosArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, -1, -1));

        panelCentral.add(panelIzquierdo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 250, 630));

        jLabel49.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaces/wp5819605.jpg"))); // NOI18N
        jLabel49.setText("jLabel49");
        panelCentral.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, -140, 2940, 1360));

        jPanel5.add(panelCentral, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout SimuladorLayout = new javax.swing.GroupLayout(Simulador);
        Simulador.setLayout(SimuladorLayout);
        SimuladorLayout.setHorizontalGroup(
            SimuladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1185, Short.MAX_VALUE)
        );
        SimuladorLayout.setVerticalGroup(
            SimuladorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Simulador", Simulador);

        Configuracion.setBackground(new java.awt.Color(153, 204, 255));
        Configuracion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel22.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(51, 51, 51));
        jLabel22.setText("Duracion de Ciclo (ms)");
        Configuracion.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 31, -1, -1));

        spinnerDuracionCiclo.setModel(new javax.swing.SpinnerNumberModel(500, 10, 5000, 50));
        Configuracion.add(spinnerDuracionCiclo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, 90, 30));

        btnAplicarDuracion.setText("Aplicar");
        btnAplicarDuracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAplicarDuracionActionPerformed(evt);
            }
        });
        Configuracion.add(btnAplicarDuracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 89, -1));

        jTabbedPane1.addTab("Configuracion", Configuracion);

        Graficos.setBackground(new java.awt.Color(153, 204, 255));
        Graficos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelGrafico.setLayout(new java.awt.BorderLayout());
        Graficos.add(panelGrafico, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 330));

        panelGrafico2.setLayout(new java.awt.BorderLayout());
        Graficos.add(panelGrafico2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 0, 600, 330));

        panelGrafico3.setLayout(new java.awt.BorderLayout());
        Graficos.add(panelGrafico3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, 590, 340));

        panelGrafica4.setLayout(new java.awt.BorderLayout());
        Graficos.add(panelGrafica4, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 340, 600, 340));

        jTabbedPane1.addTab("Graficos", Graficos);

        Estadisticas.setLayout(new java.awt.GridLayout(3, 2));

        EstadisticasGenerales.setBorder(javax.swing.BorderFactory.createTitledBorder("Estadisticas Generales"));

        jLabel17.setText("Procesos Totales Terminados:");

        jLabel18.setText("Procesos I/O Bound Terminados:");

        jLabel19.setText("Procesos CPU bound Terminados:");

        jLabel20.setText("Ciclo Actual:");

        jLabel21.setText("Throughput General:");

        lblStatsTotales.setText("0");

        lblStatsIOBound.setText("0");

        lblStatsCPUBound.setText("0");

        lblStatsCicloActual.setText("0");

        lblStatsThroughput.setText("0");

        javax.swing.GroupLayout EstadisticasGeneralesLayout = new javax.swing.GroupLayout(EstadisticasGenerales);
        EstadisticasGenerales.setLayout(EstadisticasGeneralesLayout);
        EstadisticasGeneralesLayout.setHorizontalGroup(
            EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsTotales))
                    .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblStatsIOBound, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(104, 104, 104)
                .addGroup(EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCPUBound)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsThroughput))
                    .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatsCicloActual)))
                .addContainerGap(450, Short.MAX_VALUE))
        );
        EstadisticasGeneralesLayout.setVerticalGroup(
            EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EstadisticasGeneralesLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel19)
                    .addComponent(jLabel21)
                    .addComponent(lblStatsTotales)
                    .addComponent(lblStatsCPUBound)
                    .addComponent(lblStatsThroughput))
                .addGap(27, 27, 27)
                .addGroup(EstadisticasGeneralesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel20)
                    .addComponent(lblStatsIOBound)
                    .addComponent(lblStatsCicloActual))
                .addContainerGap(129, Short.MAX_VALUE))
        );

        Estadisticas.add(EstadisticasGenerales);

        jTabbedPane1.addTab("Estadisticas", Estadisticas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1187, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearProcesoActionPerformed
        // TODO add your handling code here:
        try {
                // 1. Leer datos comunes de la interfaz
//                int id = so.getProcessCounter(); // Usamos un getter ahora (lo crearemos)
               
                int instrucciones = (int) spinnerInstrucciones.getValue();

                // --- VALORES FIJOS TEMPORALES (¡DEBERÍAS AÑADIR SPINNERS PARA ESTOS!) ---
                long tiempoESFijo = 5L; // Tiempo ES fijo temporal (usado por CPU Bound)
                int prioridad = 0; // Prioridad fija temporal
                // --- FIN VALORES FIJOS ---

                // Determinar tipo
                String tipoStr = (String) comboTipo.getSelectedItem();
                Proceso.Tipo tipo;
                if (tipoStr.equals("CPU bound")) {
                    tipo = Proceso.Tipo.CPU_BOUND;
                } else if (tipoStr.equals("I/O bound")) {
                    tipo = Proceso.Tipo.IO_BOUND;
                } else {
                    tipo = Proceso.Tipo.CPU_BOUND; // Asumimos Normal si no es ninguno
                }

                // 2. Llamar al método crearProceso adecuado
                if (tipo == Proceso.Tipo.IO_BOUND) {
                    // Leer valores específicos de I/O Bound
                    int instParaES = (int) spinnerCiclosExcepcion.getValue();
                    int ciclosParaES = (int) spinnerCiclosSatisfacer.getValue();

                    // Llamar a la versión IO Bound de crearProceso
                    so.crearProceso(tipo, instrucciones, prioridad, instParaES, ciclosParaES); 
                    // Nota: Pasé 0 como tiempoES porque este constructor no lo usa directamente para I/O

                } else { 
                    // Para CPU_BOUND 
                    // Llamar a la versión NO IO Bound de crearProceso
                    so.crearProceso(tipo, instrucciones, prioridad);
                }

            } catch (Exception e) {
                // Mostrar un error si algo sale mal
                javax.swing.JOptionPane.showMessageDialog(this, "Error al crear proceso: " + e.getMessage());
                e.printStackTrace(); // Imprime más detalles del error en la consola
            }
    }//GEN-LAST:event_btnCrearProcesoActionPerformed

    private void btnGuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCambiosActionPerformed
        // TODO add your handling code here:
        String politicaSeleccionada = (String) comboPolitica.getSelectedItem();
        ISchedulingAlgorithm nuevoAlgoritmo;

        switch (politicaSeleccionada) {
            case "FCFS":
                nuevoAlgoritmo = new FIFOScheduling();
                break;
            case "Round Robin":
                nuevoAlgoritmo = new RRScheduling();
                break;
            case "SPN":
                nuevoAlgoritmo = new SPNScheduling();
                break;
            case "SRT":
                nuevoAlgoritmo = new SRTScheduling();
                break;
            case "HRRN":
                nuevoAlgoritmo = new HRRNScheduling();
                break;
            case "Feedback":
                nuevoAlgoritmo = new FeedbackScheduling();
                break;
            default:
                nuevoAlgoritmo = new FIFOScheduling(); // Default
        }

        // Llama al método del SO que ya existe
        so.setAlgoritmo(nuevoAlgoritmo); 

        // Ajusta el quantum de la CPU según el algoritmo
        if (nuevoAlgoritmo.hasQuantum()) {
            so.setCPUQuantum(5); // 5 Ticks por defecto, puedes hacerlo configurable
        } else {
            so.setCPUQuantum(0); // 0 significa sin quantum
        }
    }//GEN-LAST:event_btnGuardarCambiosActionPerformed

    private void comboTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTipoActionPerformed

    private void comboTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTipoItemStateChanged
// Verifica si el estado del item cambió (fue seleccionado o deseleccionado)
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String tipoSeleccionado = (String) comboTipo.getSelectedItem();

            boolean esIOBound = tipoSeleccionado.equals("I/O bound");

            // Habilita o deshabilita los spinners basados en la selección
            spinnerCiclosExcepcion.setEnabled(esIOBound);
            spinnerCiclosSatisfacer.setEnabled(esIOBound);
        } 
    }//GEN-LAST:event_comboTipoItemStateChanged

    private void btnAplicarDuracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAplicarDuracionActionPerformed
        // TODO add your handling code here:
        try {
            // Leer el valor del spinner
            int nuevoTiempoMs = (int) spinnerDuracionCiclo.getValue();

            // Validar (aunque el spinner ya tiene límites, una doble verificación es buena)
            if (nuevoTiempoMs > 0) {
                // Llamar al método del SO para aplicar el cambio
                so.setDuracionCiclo(nuevoTiempoMs);
                guardarConfiguracionCompleta();
                
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "La duración debe ser mayor que cero.");
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al aplicar duración: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAplicarDuracionActionPerformed

    private void btnGuardarDefaultsProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarDefaultsProcesoActionPerformed
        // TODO add your handling code here:
        
        guardarConfiguracionCompleta(); // Simplemente llama al método que guarda todo
        
    }//GEN-LAST:event_btnGuardarDefaultsProcesoActionPerformed

    private void btnCargarProcesosArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarProcesosArchivoActionPerformed
        // TODO add your handling code here:
            
        cargarProcesosDesdeArchivo();
        
    }//GEN-LAST:event_btnCargarProcesosArchivoActionPerformed

    /**
     * @param args the command line arguments
     */

    // En SimuladorGUI.java

public void actualizarGUI() {
    // 1. Actualizar Reloj
    lblRelojGlobal.setText(String.valueOf(so.getClock().getTic()));

    // 2. Actualizar CPU
    Proceso pCPU = so.getCpu().getProcesoActual();
    if (pCPU != null) {
        lblCpuProceso.setText(pCPU.getNombre());
        lblCpuID.setText(String.valueOf(pCPU.getId()));
        lblCpuPC.setText(String.valueOf(pCPU.getProgramCounter()));
        lblCpuMAR.setText(String.valueOf(pCPU.getMemoryAddressRegister()));
        lblCpuStatus.setText(pCPU.getEstado().toString());
        lblCpuTipo.setText(pCPU.getTipo().toString());
    } else {
        lblCpuProceso.setText("---");
        lblCpuID.setText("---");
        lblCpuPC.setText("---");
        lblCpuMAR.setText("---");
        lblCpuStatus.setText("IDLE");
        lblCpuTipo.setText("---");
    }

    // 3. Actualizar Paneles de Colas (NUEVA LÓGICA)
    actualizarPanelCola(so.getColaListos(), panelContenidoListos);
    actualizarPanelCola(so.getColaBloqueados(), panelContenidoBloqueados);
    actualizarPanelCola(so.getColaTerminados(), panelContenidoTerminados);
    
    // 4. Actualizar Estadísticas
    long cicloActual = so.getClock().getTic();
    int terminadosTotales = so.getStatProcesosTotalesTerminados();

    lblStatsTotales.setText(String.valueOf(terminadosTotales));
    lblStatsIOBound.setText(String.valueOf(so.getStatIoBoundTerminados()));
    lblStatsCPUBound.setText(String.valueOf(so.getStatCpuBoundTerminados()));
    lblStatsCicloActual.setText(String.valueOf(cicloActual));

    // Calcular Throughput (Procesos / Ticks)
    // El PDF pide "Procesos completados por unidad de tiempo" [cite: 23]
    if (cicloActual > 0) {
        double throughput = (double) terminadosTotales / cicloActual;
        // Formatear a 6 decimales
        lblStatsThroughput.setText(String.format("%.6f", throughput));
    } else {
        lblStatsThroughput.setText("0.0");
    }
    
    if (jTabbedPane1.getSelectedComponent() == panelGrafico.getParent()) {
     actualizarGraficoThroughput();
         actualizarGraficoTiempoEspera();   
         actualizarGraficoEquidad();
         actualizarGraficoCPUIdleOcupado();
         
         

    }
    
}

// Method to load configuration from config.json
private void cargarConfiguracion() {
    SimConfig config = null;
    Gson gson = new Gson();

    // Try to read the config.json file
    try (FileReader reader = new FileReader("config.json")) {
        config = gson.fromJson(reader, SimConfig.class);
        System.out.println("Configuration loaded from config.json");
    } catch (IOException e) {
        System.err.println("Could not load config.json (using defaults): " + e.getMessage());
        // File not found or error reading, create a default config
        config = new SimConfig(); // Uses the default 500ms
    }

        // Apply the loaded (or default) configuration
    if (config != null) {
        // --- Aplicar Duración Ciclo (como antes) ---
        long loadedDuration = config.getDuracionCicloMs();
        spinnerDuracionCiclo.setValue((int) loadedDuration);
        if (so != null) {
            so.setDuracionCiclo(loadedDuration);
        }

        // --- Aplicar Defaults de Creación de Proceso ---
        spinnerInstrucciones.setValue(config.getDefaultInstrucciones());
        comboTipo.setSelectedItem(config.getDefaultTipoProceso());
        spinnerCiclosExcepcion.setValue(config.getDefaultCiclosGenExcepcion());
        spinnerCiclosSatisfacer.setValue(config.getDefaultCiclosSatExcepcion());

        // Asegurarse que los spinners de E/S se habiliten/deshabiliten correctamente
        boolean esIOBound = config.getDefaultTipoProceso().equals("I/O bound");
        spinnerCiclosExcepcion.setEnabled(esIOBound);
        spinnerCiclosSatisfacer.setEnabled(esIOBound);

    } else {
         // Si config es null (error grave), podrías poner valores fijos aquí
         System.err.println("Error crítico: config object es null en cargarConfiguracion.");
         spinnerDuracionCiclo.setValue(500);
         spinnerInstrucciones.setValue(10);
         comboTipo.setSelectedItem("CPU bound");
         spinnerCiclosExcepcion.setValue(5);
         spinnerCiclosSatisfacer.setValue(10);
         spinnerCiclosExcepcion.setEnabled(false);
         spinnerCiclosSatisfacer.setEnabled(false);
    }
}

// Guarda TODA la configuración actual (ciclo + defaults de proceso) en config.json
private void guardarConfiguracionCompleta() {
    SimConfig config = new SimConfig(); // Crea un objeto nuevo

    try {
        // Leer duración del ciclo
        config.setDuracionCicloMs((int) spinnerDuracionCiclo.getValue());

        // Leer defaults de creación de proceso
        config.setDefaultInstrucciones((int) spinnerInstrucciones.getValue());
        config.setDefaultTipoProceso((String) comboTipo.getSelectedItem());
        config.setDefaultCiclosGenExcepcion((int) spinnerCiclosExcepcion.getValue());
        config.setDefaultCiclosSatExcepcion((int) spinnerCiclosSatisfacer.getValue());

    } catch (Exception e) {
        System.err.println("Error leyendo valores de la GUI para guardar config: " + e.getMessage());
        // Podrías mostrar un error al usuario aquí
        javax.swing.JOptionPane.showMessageDialog(this, "Error al leer valores para guardar: " + e.getMessage(), "Error Guardando Config", javax.swing.JOptionPane.ERROR_MESSAGE);
        return; // No guardar si hay error leyendo
    }

    // Guardar a JSON (igual que antes)
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    String jsonString = gson.toJson(config);

    try (FileWriter writer = new FileWriter("config.json")) {
        writer.write(jsonString);
        System.out.println("Configuración completa guardada en config.json");
        // Opcional: Mostrar mensaje de éxito al usuario
        // javax.swing.JOptionPane.showMessageDialog(this, "Defaults guardados.");
    } catch (IOException e) {
        System.err.println("Error guardando configuración completa en config.json: " + e.getMessage());
        javax.swing.JOptionPane.showMessageDialog(this, "Error guardando archivo de configuración:\n" + e.getMessage(), "Config Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
}

// Método ayudante para no repetir código
// Método ayudante para actualizar un JPanel con bloques de procesos
 private void actualizarPanelCola(Cola cola, javax.swing.JPanel panelDestino) {
     // 1. Limpiar los bloques anteriores del panel
     panelDestino.removeAll();

     // 2. Iterar sobre la cola usando tu clase Lista/Nodo
     if (cola != null && !cola.isEmpty()) {
         Nodo nodoActual = cola.getFrente();
         while (nodoActual != null) {
             Proceso proceso = nodoActual.getProceso();
             if (proceso != null) {
                 // 3. Crear una instancia del bloque visual
                 ProcesoBloqueGUI bloque = new ProcesoBloqueGUI();
                 // 4. Llenar el bloque con los datos del proceso
                 bloque.setProcesoData(proceso);
                 // 5. Añadir el bloque al panel destino
                 panelDestino.add(bloque);
             }
             nodoActual = nodoActual.getSiguiente();
         }
     }

     // 6. Refrescar el layout del panel para mostrar los nuevos bloques
     panelDestino.revalidate();
     panelDestino.repaint();
 }

private void actualizarGraficoThroughput() {
    // 1. Crear el set de datos para el gráfico de barras
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    String seriesKey = "Throughput"; // Nombre de la serie (leyenda)

    // 2. Iterar sobre todos los tipos de políticas definidos en el Enum
    for (SchedulingType tipo : SchedulingType.values()) {
        // Obtener datos del backend para esta política específica
        int terminados = so.getTerminadosPorPolitica(tipo); // Usa el nuevo getter
        long ciclos = so.getCiclosPorPolitica(tipo); // Usa el nuevo getter

        // Calcular el throughput específico (procesos terminados / ciclos activos)
        double throughput = 0.0;
        if (ciclos > 0) { // Evitar división por cero
            throughput = (double) terminados / ciclos;
        }

        // Usar el nombre del Enum como etiqueta para la barra en el eje X
        String nombrePolitica = tipo.toString(); // Ej: FCFS, ROUNDROBIN, SPN...

        // Añadir el valor calculado al dataset
        dataset.addValue(throughput, seriesKey, nombrePolitica);
    }

    // --- El resto del código para crear y mostrar el gráfico sigue igual ---

    // 3. Crear el gráfico de barras
    JFreeChart barChart = ChartFactory.createBarChart(
        "Comparación de Throughputs", // Título
        "Política",                   // Eje X
        "Throughput",                 // Eje Y
        dataset                       // Datos actualizados
    );

    // 4. Crear el panel que contiene el gráfico
    ChartPanel chartPanel = new ChartPanel(barChart);

    // 5. Añadir/Actualizar el panel del gráfico en nuestro 'panelGrafico'
    panelGrafico.removeAll(); // Limpia el panel
    panelGrafico.add(chartPanel, BorderLayout.CENTER); // Añade el gráfico actualizado
    panelGrafico.validate(); // Refresca el panel
    panelGrafico.repaint(); // Asegura redibujado
}

private void actualizarGraficoTiempoEspera() {
    // 1️⃣ Crear dataset
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    for (SchedulingType tipo : SchedulingType.values()) {
        double tiempoPromedio = so.getTiempoEsperaPromedioPorPolitica(tipo);
        dataset.addValue(tiempoPromedio, "Tiempo Promedio de Espera", tipo.toString());
    }

    // 2️⃣ Crear gráfico
    JFreeChart chart = ChartFactory.createBarChart(
        "Tiempo Promedio de Espera por Algoritmo",
        "Algoritmo",
        "Ticks de Espera",
        dataset
    );

    // 3️⃣ Crear panel del gráfico
    ChartPanel panel = new ChartPanel(chart);

    // 4️⃣ Limpiar y actualizar el panel correcto (panelGrafico2)
    panelGrafico2.removeAll();
    panelGrafico2.add(panel, BorderLayout.CENTER);
    panelGrafico2.validate();
    panelGrafico2.repaint();
}

private void actualizarGraficoEquidad() {
    // 1️⃣ Crear dataset
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    for (SchedulingType tipo : SchedulingType.values()) {
        double equidadPromedio = so.getEquidadPromedioPorPolitica(tipo);
        dataset.addValue(equidadPromedio, "Equidad Promedio", tipo.toString());
    }

    // 2️⃣ Crear gráfico
    JFreeChart chart = ChartFactory.createBarChart(
        "Equidad Promedio por Política",
        "Algoritmo",
        "Equidad",
        dataset
    );

    // 3️⃣ Crear panel del gráfico
    ChartPanel panel = new ChartPanel(chart);

    // 4️⃣ Limpiar y actualizar el panel correspondiente
    panelGrafico3.removeAll();
    panelGrafico3.add(panel, BorderLayout.CENTER);
    panelGrafico3.validate();
    panelGrafico3.repaint();
}

   private void actualizarGraficoCPUIdleOcupado() {
    // 1️⃣ Crear dataset para PieChart
    DefaultPieDataset dataset = new DefaultPieDataset();

    long tiempoOcupado = this.so.getCpu().getTiempoOcupado();
    long tiempoTotal = this.so.getClock().getTic(); // asumimos que clock cuenta el tic global
    long tiempoIdle = tiempoTotal - tiempoOcupado;

    // Evitar valores negativos por si algo sale mal
    if (tiempoIdle < 0) tiempoIdle = 0;

    dataset.setValue("CPU Ocupada", tiempoOcupado);
    dataset.setValue("CPU Idle", tiempoIdle);

    // 2️⃣ Crear el gráfico de torta
    JFreeChart pieChart = ChartFactory.createPieChart(
        "Uso de CPU",   // título
        dataset,        // dataset
        true,           // leyenda
        true,           // tooltips
        false           // URLs
    );

    // 2️⃣b Configurar colores y estilo del gráfico
    PiePlot plot = (PiePlot) pieChart.getPlot();
    plot.setSectionPaint("CPU Ocupada", new Color(79, 129, 189)); // azul
    plot.setSectionPaint("CPU Idle", new Color(192, 80, 77));     // rojo
    plot.setBackgroundPaint(Color.WHITE);                         // fondo
    plot.setOutlineVisible(false);                                // sin borde
    plot.setLabelBackgroundPaint(new Color(220, 220, 220, 150)); // fondo etiquetas

    // 3️⃣ Crear panel del gráfico
    ChartPanel chartPanel = new ChartPanel(pieChart);

    // 4️⃣ Limpiar y actualizar panel correspondiente (panelCPU)
    panelGrafica4.removeAll();
    panelGrafica4.add(chartPanel, BorderLayout.CENTER);
    panelGrafica4.validate();
    panelGrafica4.repaint();
}


    public javax.swing.JTextArea getAreaLog() {
        return areaLog;
    }
    
    // Método principal llamado por el botón
private void cargarProcesosDesdeArchivo() {
    
//            System.out.println("entro 1");
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setCurrentDirectory(new File(".")); // Directorio del proyecto
    fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Procesos (.json, .csv)", "json", "csv"));
    fileChooser.setDialogTitle("Seleccionar archivo de procesos (.json o .csv)");

    int result = fileChooser.showOpenDialog(this);
// System.out.println("entro 2");
    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        String fileName = selectedFile.getName().toLowerCase();
        Lista<ProcesoConfig> procesosParaCargar = null; // Usa tu clase Lista
// System.out.println("entro 3");
        try {
            // Determinar tipo y parsear
            if (fileName.endsWith(".json")) {
                procesosParaCargar = parseJson(selectedFile);
            } else if (fileName.endsWith(".csv")) {
                procesosParaCargar = parseCsv(selectedFile);
            } else {
                mostrarError("Tipo de archivo no soportado. Seleccione .json o .csv.");
                return;
            }
//             System.out.println("entro 4");

            // Validar resultado del parseo
            if (procesosParaCargar == null || procesosParaCargar.isEmpty()) {
               mostrarAdvertencia("El archivo está vacío o tiene un formato incorrecto.");
               return;
            }
//            System.out.println("entro");
            // Crear los procesos en el SO
            crearProcesosDesdeConfig(procesosParaCargar);
//            System.out.println("salio");
            mostrarInformacion("Procesos cargados desde " + selectedFile.getName());

        } catch (FileNotFoundException e) {
             mostrarError("Archivo no encontrado:\n" + e.getMessage());
        } catch (IOException e) {
             mostrarError("Error al leer el archivo:\n" + e.getMessage());
        } catch (com.google.gson.JsonSyntaxException e) {
             mostrarError("Error en el formato del archivo JSON:\n" + e.getMessage());
        } catch (Exception e) {
             mostrarError("Ocurrió un error inesperado al procesar el archivo:\n" + e.getMessage());
             e.printStackTrace(); // Imprime detalles en consola
        }
    }
}

// Método para parsear JSON
private Lista<ProcesoConfig> parseJson(File file) throws IOException, com.google.gson.JsonSyntaxException {
    Gson gson = new Gson();
    Lista<ProcesoConfig> listaProcesos = new Lista<>(); // Crea tu Lista
//    System.out.println("a ver 1");
    try (FileReader reader = new FileReader(file)) {
        // Gson parsea a un array normal
//        System.out.println("a ver 1.1\n"+reader);
        ProcesoConfig[] procesosArray = gson.fromJson(reader, ProcesoConfig[].class);
//    System.out.println("a ver 2");

        // Copia manualmente del array a tu Lista
        if (procesosArray != null) {
            for (ProcesoConfig proc : procesosArray) {
                if (proc != null) { // Evitar nulls si el JSON tiene entradas vacías
                   listaProcesos.add(proc);
                }
            }
        }
    }
    return listaProcesos;
}

private Lista<ProcesoConfig> parseCsv(File file) throws IOException, NumberFormatException {
    // Usa tu clase Lista directamente
    Lista<ProcesoConfig> procesos = new Lista<>();
    try (BufferedReader br = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
        String line;
        boolean isFirstLine = true;

        while ((line = br.readLine()) != null) {
            if (isFirstLine) {
                isFirstLine = false;
                continue;
            }
            if (line.trim().isEmpty() || line.trim().startsWith("#")) {
                continue;
            }
            String[] fields = line.split(",");

            if (fields.length < 4) {
                 System.err.println("WARN: Línea CSV con campos insuficientes, omitida: " + line);
                 continue;
            }

            try {
                ProcesoConfig proc = new ProcesoConfig();

                // Asignar usando setters
//                proc.setNombreManual(fields[0].trim());
                proc.setInstruccionesManual(Integer.parseInt(fields[1].trim()));
                proc.setTipoManual(fields[2].trim());

                // Campos opcionales IO_BOUND
                if (fields.length > 4 && !fields[4].trim().isEmpty()) {
                    proc.setInstruccionesParaESManual(Integer.parseInt(fields[4].trim()));
                }
                if (fields.length > 5 && !fields[5].trim().isEmpty()) {
                    proc.setCiclosParaCompletarESManual(Integer.parseInt(fields[5].trim()));
                }

                // Añade a tu Lista personalizada
                procesos.add(proc);

            } catch (NumberFormatException e) {
                System.err.println("WARN: Error de formato numérico en línea CSV, omitida: " + line + " -> " + e.getMessage());
            } catch (ArrayIndexOutOfBoundsException e) {
                 System.err.println("WARN: Faltan campos esperados en línea CSV, omitida: " + line);
            } catch (Exception e) {
                System.err.println("WARN: Error procesando línea CSV, omitida: " + line + " -> " + e.getMessage());
            }
        }
    }
    return procesos;
}

// Nuevo método para centralizar la creación de procesos
// Cambia el tipo del parámetro y la forma de iterar
    private void crearProcesosDesdeConfig(Lista<ProcesoConfig> configs) { // <-- Cambio 1: Usa tu clase Lista
         // Iterar sobre tu Lista personalizada usando índices
         for (int i = 0; i < configs.size(); i++) { // <-- Cambio 2: Bucle for normal
             ProcesoConfig configProc = configs.get(i); // <-- Cambio 2: Obtener por índice

             if (configProc == null) continue; // Saltar si el elemento es null

            // --- El RESTO del código dentro del bucle SIGUE IGUAL ---

            // Validaciones básicas (mejoradas)
            if (configProc.getTipo() == null || configProc.getTipo().trim().isEmpty() ||
                configProc.getInstrucciones() <= 0 || configProc.getTamano() <= 0) {
                System.err.println("WARN: Proceso inválido o incompleto, omitido");
                continue;
            }

            // Convertir String a Enum
            Proceso.Tipo tipoEnum;
            tipoEnum = Proceso.Tipo.valueOf(configProc.getTipo().trim().toUpperCase());

//            try {
//                tipoEnum = Proceso.Tipo.valueOf(configProc.getTipo().trim().toUpperCase());
//            } catch (IllegalArgumentException e) {
//                System.err.println("WARN: Tipo de proceso desconocido '" + configProc.getTipo() + "' para " + configProc.getNombre() );
//            }

//            int id = so.getProcessCounter(); // SO asigna ID incremental
            int prioridad = 0; // Fijo por ahora

            // Pasar nombre opcional al SO
//            if (configProc.getNombre() != null && !configProc.getNombre().trim().isEmpty()) {
//                so.setNextProcessName(configProc.getNombre());
//            }

            // Llamar al método crearProceso adecuado
            if (tipoEnum == Proceso.Tipo.IO_BOUND) {
                so.crearProceso(tipoEnum, configProc.getInstrucciones(),
                                prioridad, configProc.getInstruccionesParaES(), configProc.getCiclosParaCompletarES());
            } else {
                so.crearProceso( tipoEnum, configProc.getInstrucciones() ,
                                prioridad);
            }
         } // Fin del bucle for
    } // Fin del método

// Métodos ayudantes para mostrar mensajes (opcional, pero ordena el código)
private void mostrarError(String mensaje) {
    javax.swing.JOptionPane.showMessageDialog(this, mensaje, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
}
private void mostrarAdvertencia(String mensaje) {
    javax.swing.JOptionPane.showMessageDialog(this, mensaje, "Advertencia", javax.swing.JOptionPane.WARNING_MESSAGE);
}
 private void mostrarInformacion(String mensaje) {
    javax.swing.JOptionPane.showMessageDialog(this, mensaje, "Información", javax.swing.JOptionPane.INFORMATION_MESSAGE);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Configuracion;
    private javax.swing.JPanel Estadisticas;
    private javax.swing.JPanel EstadisticasGenerales;
    private javax.swing.JPanel Graficos;
    private javax.swing.JPanel Simulador;
    private javax.swing.JTextArea areaLog;
    private javax.swing.JButton btnAplicarDuracion;
    private javax.swing.JButton btnCargarProcesosArchivo;
    private javax.swing.JButton btnCrearProceso;
    private javax.swing.JButton btnGuardarCambios;
    private javax.swing.JButton btnGuardarDefaultsProceso;
    private javax.swing.JComboBox<String> comboPolitica;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCpuID;
    private javax.swing.JLabel lblCpuMAR;
    private javax.swing.JLabel lblCpuPC;
    private javax.swing.JLabel lblCpuProceso;
    private javax.swing.JLabel lblCpuStatus;
    private javax.swing.JLabel lblCpuTipo;
    private javax.swing.JLabel lblRelojGlobal;
    private javax.swing.JLabel lblStatsCPUBound;
    private javax.swing.JLabel lblStatsCicloActual;
    private javax.swing.JLabel lblStatsIOBound;
    private javax.swing.JLabel lblStatsThroughput;
    private javax.swing.JLabel lblStatsTotales;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JPanel panelContenidoBloqueados;
    private javax.swing.JPanel panelContenidoListos;
    private javax.swing.JPanel panelContenidoTerminados;
    private javax.swing.JPanel panelDerecho;
    private java.awt.Panel panelGrafica4;
    private javax.swing.JPanel panelGrafico;
    private java.awt.Panel panelGrafico2;
    private java.awt.Panel panelGrafico3;
    private javax.swing.JPanel panelIzquierdo;
    private javax.swing.JSpinner spinnerCiclosExcepcion;
    private javax.swing.JSpinner spinnerCiclosSatisfacer;
    private javax.swing.JSpinner spinnerDuracionCiclo;
    private javax.swing.JSpinner spinnerInstrucciones;
    // End of variables declaration//GEN-END:variables
}
